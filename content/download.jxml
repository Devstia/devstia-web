<?
const fetch = require('node-fetch'); // v2 for CommonJS
const os = require('os');
const { spawn, spawnSync, exec } = require('child_process');
const path = require('path');
const fs = require('fs');

async function getLatestAssets() {
    const platform = os.arch() === 'arm64' ? 'arm64' : 'amd64';
    const apiUrl = 'https://api.github.com/repos/Devstia/devstia-vm/releases/latest';

    const response = await fetch(apiUrl, {
        headers: { 'User-Agent': 'devstia-app' }
    });
    if (!response.ok) throw new Error(`GitHub API error: ${response.statusText}`);
    const release = await response.json();

    // Filter assets for the current platform and part extensions
    const assetRegex = new RegExp(`-${platform}\\.part\\d+$`);
    const assets = release.assets
        .filter(asset => assetRegex.test(asset.name))
        .map(asset => ({
            name: asset.name,
            url: asset.browser_download_url,
            size: asset.size
        }));

    return assets;
}

function isCurlAvailable() {
    const isWin = process.platform === 'win32';
    const cmd = isWin ? 'curl.exe' : 'curl';
    const result = spawnSync(cmd, ['--version'], { stdio: 'ignore' });
    return result.status === 0;
}

// Example usage:
await getLatestAssets().then(assets => {
    const destDir = path.join(devstia.getAppDataDir(), 'baseVMS');
    const detailsFile = path.join(destDir, 'dl_details.json');
    const scriptPath = path.join(devstia.getScriptsDir(), 'download.sh');

    // Create the destination directory if it doesn't exist
    if (!fs.existsSync(destDir)) {
        fs.mkdirSync(destDir, { recursive: true });
    }

    // Check for existing details file
    if (!fs.existsSync(detailsFile)) {

        // Write the assets details to the destDir
        fs.writeFileSync(detailsFile, JSON.stringify(assets, null, 2));   

        // Construct the command to execute the download script
        const assetUrls = assets.map(asset => asset.url);
        const command = `"${scriptPath}" "${destDir}" ${assetUrls.join(' ')}`;

        // Execute the download script as a detached process
        exec(command, (error, stdout, stderr) => {
            if (error) {
                console.error(`Error executing download script: ${error.message}`);
                _e(`Error executing download script: ${error.message}<br>`);
                return;
            }
            console.log(`Download script stdout: ${stdout}`);
            console.error(`Download script stderr: ${stderr}`);
            _e('Download completed.<br>');
        });

        _e('Download started in the background...<br>');

    } // End check for existing details file

    // Render dl_progress.html
    const progressPath = path.join(devstia.getAppDataDir(), 'web', 'content', 'dl_progress.html');
    const progressContent = fs.readFileSync(progressPath, 'utf8');
    _e(progressContent);
}).catch(err => {
    _e('Error fetching assets:' + err.message);
});
?>
